private import "mantaray.mr"
private import "utilities.mr"

auto node settings {
    output samples: 100;
    output resolution_x: 1900;
    output resolution_y: 1268;
    output output_dir: "../../workspace/render/bitmap/";
    output output_name: "the_gadget";
    output current_date: current_date();
    output camera: scene_standard_camera;
}

material_library library()
scene scene()

auto node base_material {
    bsdf_material(
        name: "Base",
        library: library,
        bsdf: microfacet_reflection_bsdf(ggx_distribution(0.5)),
        reflectance: 1.0
    )
}

auto node gadget_material {
    bsdf_material(
        name: "Gadget",
        library: library,
        bsdf: microfacet_reflection_bsdf(ggx_distribution(0.5)),
        reflectance: 1.0
    )
}

obj_file scene_mesh(
    filename: "../../demos/models/the_gadget.obj",
    materials: library,
    default_material: "Base"
)

scene_object main_object(
    name: "Main",
    scene: scene,
    geometry: kd_tree(scene_mesh, granularity: 8)
)

camera_target camera_target(
    position:   vector(-0.0359, 1.87384, 14.6457),
    target:     vector(0.00000, 1.12440, 0.00000),
    up:         vector(0.00000, 1.00000, 0.00000)
)

auto private node scene_standard_camera {
    alias output __out: standard_camera(
        up: camera_target.up,
        position: camera_target.position,
        direction: camera_target.direction,
        resolution_x: settings.resolution_x,
        resolution_y: settings.resolution_y,
        plane_height: 0.4, // 0.4, 0.27
        plane_distance: 1.0,
        samples: settings.samples,
        sampler: random_sampler()
    );
}

ray_tracer mr(
    scene: scene,
    camera: settings.camera,
    materials: library,
    background: 1.3
)

image_output(
    map: mr.image,
    filename: 
        settings.output_dir + settings.current_date.as_string + "_" + settings.output_name + 
        "_S" + string(settings.samples) + ".jpg"
)
