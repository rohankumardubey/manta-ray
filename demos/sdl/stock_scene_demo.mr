private import "mantaray.mr"
private import "utilities.mr"

auto node settings {
    output samples: 10;
    output resolution_x: 1900;
    output resolution_y: 1268;
    output enable_fraunhofer: false;
    output save_diffraction_patterns: true;
    output output_dir: "../../workspace/render/bitmap/";
    output output_name: "stock_scene_demo";
    output current_date:            current_date();

    output aperture:                polygonal_aperture(0.300, curvature: 0.5);
    output diffraction_aperture:    polygonal_aperture(0.180, curvature: 0.5);
    output camera:                  scene_lens_camera;
}

material_library library()
scene scene()

auto node steel_materials {
    bsdf_material(
        name: "Steel",
        library: library,
        bsdf: bsdf
    )

    bsdf_material(
        name: "BlackSteel",
        library: library,
        bsdf: bsdf,
        reflectance: srgb_i(0xC0, 0xC0, 0xC0)
    )

    image_file metal(
        filename: "../../demos/textures/stock-scene/metal.jpg"
    )

    pow curved_fingerprint(
        fingerprint,
        4.0
    )

    bilayer_brdf bsdf(
        coating: 
            phong_distribution(
                power: curved_fingerprint * 10000.0 + 16.0
            ),
        diffuse: metal,
        specular: 1.0 - 0.5 * curved_fingerprint
    )
}

auto node shiny_steel_material {
    alias output material: 
        bsdf_material(
            name: "ShinySteel",
            library: library,
            bsdf: bsdf
        );

    microfacet_brdf bsdf(
        distribution: phong_distribution(power: 5000.0)
    )
}

auto node graphite_material {
    alias output material: 
        bsdf_material(
            name: "Graphite",
            library: library,
            bsdf: bsdf,
            reflectance: srgb_i(0x29, 0x29, 0x29)
        );

    microfacet_brdf bsdf(
        distribution: phong_distribution(power: 512.0)
    )
}

auto node paint_material {
    bsdf_material(
        name: "PencilPaint",
        library: library,
        bsdf: bsdf
    )

    bilayer_brdf bsdf(
        coating: 
            phong_distribution(
                power: 1024.0 * fingerprint + 256.0
            ),
        diffuse: srgb_i(0x0F, 0x10, 0x40),
        specular: 0.1
    )
}

auto node eraser_material {
    image_file eraser(
        filename: "../../demos/textures/stock-scene/eraser.jpg"
    )

    bsdf_material(
        name: "Eraser",
        library: library,
        bsdf: lambertian_brdf(),
        reflectance: eraser
    )
}

auto node wood_material {
    image_file wood(
        filename: "../../demos/textures/light_wood.jpg"
    )

    bsdf_material(
        name: "Wood",
        library: library,
        bsdf: lambertian_brdf(),
        reflectance: wood
    )
}

auto node floor_material {
    image_file floor(
        filename: "../../demos/textures/stock-scene/floor.png"
    )

    bsdf_material(
        name: "Floor",
        library: library,
        bsdf: lambertian_brdf(),
        reflectance: uv_wrap(floor)
    )
}

auto node light_material {
    bsdf_material(
        name: "Light",
        library: library,
        bsdf: lambertian_brdf(),
        reflectance: 0.0,
        emission: 4.0
    )
}

auto node default_material {
    bsdf_material(
        name: "Default",
        library: library,
        bsdf: lambertian_brdf()
    )
}

image_file fingerprint(
    filename: "../../demos/textures/samsung_a8/fingerprints_roughness_map.png",
    correct_gamma: false
)

obj_file scene_mesh(
    filename: "../../demos/models/stock_scene_alt.obj",
    materials: library,
    default_material: "Default"
)

scene_object main_object(
    name: "Main",
    scene: scene,
    geometry: kd_tree(scene_mesh)
)

camera_target camera_target(
    position:   vector(16.5140, 7.95910, 18.1270),
    target:     vector(1.04120, -1.0326, 0.33937),
    up:         vector(0.00000, 1.00000, 0.00000)
)

auto private node scene_standard_camera {
    alias output __out: standard_camera(
        up: camera_target.up,
        position: camera_target.position,
        direction: camera_target.direction,
        resolution_x: settings.resolution_x,
        resolution_y: settings.resolution_y,
        plane_height: 0.25,
        plane_distance: 1.0,
        samples: settings.samples,
        sampler: random_sampler()
    );
}

auto private node scene_lens_camera {
    alias output __out: lens_camera(
        lens: lens,
        samples: settings.samples,
        sampler: random_sampler()
    );

    simple_lens lens(
        position: camera_target.position,
        direction: camera_target.direction,
        up: camera_target.up,
        resolution_x: settings.resolution_x,
        resolution_y: settings.resolution_y,
        aperture: settings.aperture,
        radius: 1.0,
        sensor_height: 8.0,
        focus: 22.0
    )
}

ray_tracer mr(
    scene: scene,
    camera: settings.camera,
    materials: library,
    background: 0.0
)

image_output(
    map: mr.image,
    filename: 
        settings.output_dir + settings.current_date.as_string + "_" + settings.output_name + 
        "_S" + string(settings.samples) + ".jpg"
)

diffraction_simulation(
    image: mr.image, 
    current_date: settings.current_date, 
    output_dir: settings.output_dir,
    output_name: settings.output_name,
    save_patterns: settings.save_diffraction_patterns,
    samples: settings.samples,
    enable: settings.enable_fraunhofer,
    aperture: settings.diffraction_aperture,
    step: 100.0,
    threshold: 3.0
)
