private import "mantaray.mr"
private import "utilities.mr"

private node settings {
    input this;
    input samples:              1;
    input resolution_x:         2048;
    input resolution_y:         1536;
    input enable_fraunhofer:    false;
    input save_diffraction_patterns: true;
    input output_dir:           "../../workspace/render/bitmap/";
    input output_name:          "blocks_demo";
    input camera:               camera_list.standard_camera;

    list_cameras camera_list(this)
}   (settings) -> settings

material_library library()
scene scene()

node block_material {
    input library;

    simple_bsdf_material(
        name: "Block",
        library: library,
        bsdf: bsdf
    )

    simple_bsdf_material(
        name: "Letters",
        library: library,
        bsdf: bsdf
    )

    image_file diffuse_map(
        filename: "../../demos/textures/blocks.png"
    )

    bilayer_bsdf bsdf(
        coating: phong_distribution(4096.0),
        diffuse: diffuse_map,
        specular: 0.1
    )
}

node ground_material {
    input library;

    simple_bsdf_material(
        name: "Ground",
        library: library,
        bsdf: bsdf
    )

    bilayer_bsdf bsdf(
        coating: phong_distribution(16.0),
        diffuse: srgb_i(255, 255, 255),
        specular: 0.75
    )
}

node light_material {
    input library;

    simple_bsdf_material(
        name: "Light",
        library: library,
        reflectance: 0.0,
        emission: 5.0,
        bsdf: lambertian_bsdf()
    )
} 

block_material(library)
ground_material(library)
light_material(library)

obj_file blocks_mesh(
    filename: "../../demos/models/blocks_floor.obj",
    materials: library,
    default_material: "Ground"
)

scene_object blocks(
    name: "Blocks",
    scene: scene,
    geometry: kd_tree(blocks_mesh)
)

scene_object light(
    name: "Bulb",
    scene: scene,
    geometry: sphere(
        radius: 10.0,
        materials: library,
        default_material: "Light",
        position: vector(10.0, 20.0, 5.5)
    )
)

private node blocks_standard_camera {
    input camera_target;
    input settings;

    alias output __out: standard_camera(
        up: camera_target.up,
        position: camera_target.position,
        direction: camera_target.direction,
        resolution_x: settings.resolution_x,
        resolution_y: settings.resolution_y,
        plane_height: 0.5,
        plane_distance: 1.0,
        samples: settings.samples,
        sampler: random_sampler()
    );
}

private node blocks_lens_camera {
    input camera_target;
    input settings;

    alias output __out :lens_camera(
        lens: lens,
        samples: settings.samples,
        sampler: random_sampler()
    );

    simple_lens lens(
        position: camera_target.position,
        direction: camera_target.direction,
        up: camera_target.up,
        resolution_x: settings.resolution_x,
        resolution_y: settings.resolution_y,
        aperture: polygonal_aperture(0.18, curvature: 0.3),
        radius: 1.0,
        sensor_height: 10.0,
        focus: 22.0
    )
}

private node list_cameras {
    input settings;
    output lens_camera: blocks_lens_camera(camera_target, settings);
    output standard_camera: blocks_standard_camera(camera_target, settings);

    camera_target camera_target(
        position:   vector(15.4473, 4.59977, 13.2961),
        target:     vector(2.63987, 3.55547, 2.42282),
        up:         vector(0.0, 1.0, 0.0)
    )
}

ray_tracer mr(
    scene: scene,
    camera: settings.camera,
    materials: library,
    background: vector(0.0, 0.0, 0.0)
)

current_date current_date()

image_output(
    map: mr.image,
    filename: 
        settings.output_dir + current_date.as_string + "_" + settings.output_name + 
        "_S" + string(settings.samples) + ".jpg"
)

diffraction_simulation(
    image: mr.image, 
    current_date: current_date, 
    output_dir: settings.output_dir,
    output_name: settings.output_name,
    save_patterns: settings.save_diffraction_patterns,
    samples: settings.samples,
    enable: settings.enable_fraunhofer
)
