private import "mantaray.mr"
private import "utilities.mr"

log("===== TEAPOT AND LAMP DEMO\n")
log(" Samples: " + string(settings.samples) + "\n")
log(" Resolution: " + 
    string(settings.resolution_x) + "x" + string(settings.resolution_y) + "\n")
log()
log()

auto node settings {
    output samples: 128;
    output resolution_x: 1920;
    output resolution_y: 1080;
    output enable_fraunhofer: false;
    output save_diffraction_patterns: true;
    output output_dir: "../../workspace/render/bitmap/";
    output output_name: "teapot_lamp_demo";
    output current_date: current_date();
}

material_library library()
scene scene()

auto node teapot_material {
    alias output material: 
        bsdf_material(
            name: "TeapotMaterial",
            library: library,
            bsdf: bsdf
        );

    bilayer_brdf bsdf(
        coating: phong_distribution(1024),
        diffuse: srgb_i(0x89, 0xCF, 0xF0),
        specular: vector(0.5, 0.5, 0.5)
    )
}

node test_material {
    alias output material: 
        bsdf_material(
            name: "TeapotMaterial",
            library: library,
            bsdf: lambertian_brdf(),
            reflectance: 0.0,
            emission:
                separator * glow_color + 
                (1.0 - separator) * vector(glow_color.g, glow_color.b, glow_color.r)
        );

    vector_var glow_color(
        (normalize(
            surface_interaction().position - vector(0, 1, 0)) + 1
        ) / 8
    )

    step separator(
        s: surface_interaction().position.y,
        foot: 0.75
    )
}

auto node floor_material {
    alias output material: 
        bsdf_material(
            name: "FloorMaterial",
            library: library,
            bsdf: bsdf
        );

    bilayer_brdf bsdf(
        coating: phong_distribution(128.0),
        diffuse: srgb_i(0xFF, 0xFF, 0xFF),
        specular: 0
    )
}

auto node bulb_material {
    alias output material:
        bsdf_material(
            name: "BulbMaterial",
            library: library,
            reflectance: vector(),
            emission: srgb_i(255, 197, 143) * 50,
            bsdf: lambertian_brdf()
        );
}

obj_file lamp_mesh(
    filename: "../../demos/models/lamp2.obj",
    materials: library,
    default_material: "FloorMaterial"
)

obj_file teapot_mesh(
    filename: "../../demos/models/lamp_teapot.obj",
    materials: library,
    default_material: "TeapotMaterial"
)

scene_object teapot(
    name: "Teapot",
    scene: scene,
    geometry: kd_tree(merge_meshes(teapot_mesh, lamp_mesh))
)

scene_object bulb(
    name: "Bulb",
    scene: scene,
    geometry: sphere(
        radius: 0.25,
        materials: library,
        default_material: "BulbMaterial",
        position: vector(0.10669, 3.42135, -2.47464)
    )
)

scene_object ground(
    name: "Ground",
    scene: scene,
    geometry: sphere(
        radius: 5000.0,
        materials: library,
        default_material: "FloorMaterial",

        // TODO: investigate issue when this is set to zero
        position: vector(0, -5000.001, 0)
    )
)

camera_target camera_target(
    position:   vector(7.0, 2.0, 0.0),
    target:     vector(0.0, 2.0, 0.0),
    up:         vector(0.0, 1.0, 0.0)
)

standard_camera camera(
    up: camera_target.up,
    position: camera_target.position,
    direction: camera_target.direction,
    resolution_x: settings.resolution_x,
    resolution_y: settings.resolution_y,
    plane_height: 1.0,
    plane_distance: 1.0,
    samples: settings.samples,
    sampler: random_sampler()
)

ray_tracer mr(
    scene: scene,
    camera: camera,
    materials: library,
    background: 0
)

image_output(
    map: mr.image,
    filename: 
        settings.output_dir + settings.current_date.as_string + "_" + settings.output_name + 
        "_S" + string(settings.samples) + ".jpg",
    jpeg_quality: 100
)

diffraction_simulation(
    image: mr.image, 
    current_date: settings.current_date, 
    output_dir: settings.output_dir,
    output_name: settings.output_name,
    save_patterns: settings.save_diffraction_patterns,
    samples: settings.samples,
    enable: settings.enable_fraunhofer
)
