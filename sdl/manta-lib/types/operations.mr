module {
    @name:          "Binary and Unary Operations"
    @project:       "MantaRay"
    @author:        "Ange Yaghi"
    @maintainer:    "Ange Yaghi"
    @copyright:     "Copyright 2019, Ange Yaghi"
    @doc:           "Defines all binary and unary operations between "
                    "fundamental types."
    @version:       "0.0.1a"
    @github:        "github.com/ange-yaghi/manta-ray"
}


private import "atomic_types.mr"
private import "conversions.mr"

public node float_negate => __mantaray__float_negate {
    input __in [float];
    alias output __out [float];
}

// Vector operations

public node vector_add => __mantaray__vector_add {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node vector_sub => __mantaray__vector_sub {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node vector_div => __mantaray__vector_div {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node vector_mul => __mantaray__vector_mul {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node dot => __mantaray__vector_dot {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node cross => __mantaray__vector_cross {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node pow => __mantaray__vector_pow {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node min => __mantaray__vector_min {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node max => __mantaray__vector_max {
    input __left [vector];
    input __right [vector];
    alias output __out [vector];
}

public node vector_negate => __mantaray__vector_negate {
    input __in [vector];
    alias output __out [vector];
}

public node normalize => __mantaray__vector_normalize {
    input __in [vector];
    alias output __out [vector];
}

public node magnitude => __mantaray__vector_magnitude {
    input __in [vector];
    alias output __out [vector];
}

public node max_component => __mantaray__vector_max_component {
    input __in [vector];
    alias output __out [vector];
}

public node abs => __mantaray__vector_absolute {
    input __in [vector];
    alias output __out [vector];
}

public node step => __mantaray__step {
    input s [vector];
    input foot [vector];
    input step [vector]: 1.0;
    input dc [vector]: 0.0;
    alias output __out [vector];
}

public node clamp {
    input s [vector];
    input min [vector]: 0;
    input max [vector]: 1;
    alias output out [vector]:
        min(max, max(min, s));
}

public node rect {
    input s [vector];
    input min [vector]: -1;
    input max [vector]: 1;
    alias output out [vector]:
        step(s, min) - step(s, max);
}

private node var {
    input in;
    alias output out: in;
}

public node map {
    input s [vector];
    input to_min [vector]: 0;
    input to_max [vector]: 1;
    input from_min [vector]: 0;
    input from_max [vector]: 1;
    alias output out [vector]: (p * to_max) + ((1 - p) * to_min);
    
    var clamped(clamp(s, from_min, from_max))
    var dist(from_max - from_min)
    var p((clamped - from_min) / dist)
}

public node average => __mantaray__vector_average {
    input __in [vector];
    alias output __out [vector];
}

// Float operations

public node float_divide => __mantaray__float_divide {
    input __in0 [float];
    input __in1 [float];
    alias output __out [float];
}

// String operations

public node string_add => __mantaray__string_add {
    input __in0 [string];
    input __in1 [string];
    alias output __out [string];
}

// Int operations

public node int_add => __mantaray__int_add {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public node int_mul => __mantaray__int_multiply {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public node int_sub => __mantaray__int_sub {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public node int_negate => __mantaray__int_negate {
    input __in [int];
    alias output __out [int];
}
