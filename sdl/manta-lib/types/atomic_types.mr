module {
    @name:          "MantaRay Atomic Types"
    @author:        "Ange Yaghi"
    @maintainer:    "Ange Yaghi"
    @copyright:     "Copyright 2019, Ange Yaghi"
    @doc:           "Defines all atomic types used by MantaRay"
    @version:       "0.0.1a"
    @github:        "github.com/ange-yaghi/manta-ray"
}

// ========================================================
//  Channels
// ========================================================

@doc: "Float channel type"
private node float_channel => __mantaray__float { /* void */}

@doc: "Scalar channel with vector internal representation"
private node scalar_channel => __mantaray__vector { /* void */ }

@doc: "Vector channel type"
private node vector_channel => __mantaray__vector {
    output x [::scalar_channel];
    output y [::scalar_channel];
    output z [::scalar_channel];
    output w [::scalar_channel];

    output r [::scalar_channel];
    output g [::scalar_channel];
    output b [::scalar_channel];
    output a [::scalar_channel];
}

@doc: "String channel type"
private node string_channel => __mantaray__string { /* void */ }

// ========================================================
//  Literals
// ========================================================

public node literal_string => __mantaray__literal_string {
    alias output __out [::string];
}

public node literal_float => __mantaray__literal_float {
    alias output __out [::float];
}

// ========================================================
//  Types
// ========================================================

@doc: "Scalar type with vector internal representation"
public node scalar {
    input s [::scalar_channel];
    alias output __out [::scalar_channel]: s;
}

@doc: "Float cast type"
@detail: "Converts anything connected to __in to "
         "a float type"
public node float {
    input __in [::float_channel]: 0.0;
    alias output __out: __in;
}

@doc: "Vector constructor type"
public node vector => __mantaray__vector_constructor {
    input x [::scalar];
    input y [::scalar];
    input z [::scalar];
    input w [::scalar];

    alias output __out [::vector_channel];
}

@doc: "String type"
public node string {
    input s [::string_channel]: "";
    alias output __out [::string_channel]: s;
}
